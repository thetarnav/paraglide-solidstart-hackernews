import {Component, JSX} from 'solid-js'
import * as paraglide from '../paraglide/runtime.js' // generated by paraglide
import * as adapter from './adapter.js'

export type AvailableLanguageTag = paraglide.AvailableLanguageTag
export const {availableLanguageTags, sourceLanguageTag} = paraglide
export const {useLocationPathname} = adapter

export const {LanguageTagProvider, languageTag, setLanguageTag} = adapter.createI18n(paraglide)

/**
 * Programmatically change the language tag.
 * (won't work without javascript)
 */
export const LocaleSwitcher: Component = () => {
    const language_tag = languageTag()

    return (
        <select
            name="language"
            onChange={e => setLanguageTag(e.target.value as AvailableLanguageTag)}
        >
            {availableLanguageTags.map(tag => (
                <option value={tag} selected={tag === language_tag}>
                    {tag}
                </option>
            ))}
        </select>
    )
}

export interface AlternateLinksProps {
    href?: string
    languageTag?: AvailableLanguageTag
}

/**
 * Generates `<link rel="alternate" hreflang="..." href="...">` tags for all available languages.
 *
 * To be used in the `<head>` of your html document.
 */
export const AlternateLinks: Component<AlternateLinksProps> = props => {
    const language_tag = props.languageTag ?? languageTag()
    const href = props.href ?? useLocationPathname()
    const links: JSX.Element[] = []

    for (const tag of availableLanguageTags) {
        if (tag !== language_tag) {
            links.push(<link rel="alternate" hreflang={tag} href={translateHref(href, tag)} />)
        }
    }

    return links
}

/**
 * Get the language tag from the URL.
 *
 * @param pathname The pathname to check. (e.g. "/en/foo")
 * @returns The language tag from the URL, or `undefined` if no language tag was found.
 */
export function languageTagFromPathname(pathname: string): AvailableLanguageTag | undefined {
    return adapter.languageTagFromPathname(pathname, availableLanguageTags)
}

/**
 * Get the language tag from the URL.
 */
export function useLocationLanguageTag(): AvailableLanguageTag | undefined {
    const pathname = useLocationPathname()
    return languageTagFromPathname(pathname)
}

/**
 * Changes a provided url to include the correct language tag.
 *
 * To be used on `<A href="...">` components to make sure that the anchor tag will link to the correct language, when server side rendered.
 *
 * **Use only on internal links. (e.g. `<A href="/foo">` or `<A href="/en/foo">`)**
 *
 * @example
 * ```tsx
 * <a href={i18n.translateHref("/foo/bar")}>...</a>
 * ```
 *
 * @param pathname The pathname to link to. (e.g. "/foo/bar")
 * @param language_tag The current language tag. Will read one from context by default, pass one explicitly if context is not available.
 * @returns The translated pathname. (e.g. "/en/bar")
 */
export function translateHref(pathname: string, language_tag = languageTag()): string {
    return adapter.translateHref(pathname, language_tag, paraglide.availableLanguageTags)
}
